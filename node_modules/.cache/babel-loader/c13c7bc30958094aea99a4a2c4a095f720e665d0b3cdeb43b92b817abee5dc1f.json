{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import*as XLSX from\"xlsx\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function ExamTimerApp(){// ----- STATE VARIABLES -----\nconst[userName,setUserName]=useState(\"\");// User's name\nconst[totalQuestions,setTotalQuestions]=useState(5);// Number of exam questions\nconst[estimatedTime,setEstimatedTime]=useState(0);// Calculated total exam time (in seconds)\nconst[questions,setQuestions]=useState([]);// Questions received from the backend API\nconst[currentQuestionIndex,setCurrentQuestionIndex]=useState(0);// Tracks current question number\nconst[selectedAnswers,setSelectedAnswers]=useState({});// Stores user's answers along with details per question\nconst[timeLeft,setTimeLeft]=useState(600);// Overall exam timer (in seconds)\nconst[questionTime,setQuestionTime]=useState(0);// Time taken on the current question\nconst[stage,setStage]=useState(\"input\");// Current stage: \"input\", \"loading\", \"ready\", \"exam\", \"result\"\nconst[selectedOption,setSelectedOption]=useState(\"\");// Option selected for current question\nconst[score,setScore]=useState(0);// User's total correct answers\nconst[dynamicInsight,setDynamicInsight]=useState(\"🧠 PMP Insight will appear here.\");// ----- EFFECT: Exam Timer & Question Timer -----\nuseEffect(()=>{let timer;if(stage===\"exam\"&&timeLeft>0){timer=setInterval(()=>{// Decrement overall time and increment current question time every second\nsetTimeLeft(prev=>Math.max(0,prev-1));setQuestionTime(prev=>prev+1);},1000);}// Clean up the timer when component unmounts or dependencies change\nreturn()=>clearInterval(timer);},[stage,timeLeft]);// ----- HELPER FUNCTION: Format Seconds into Minutes and Seconds -----\nconst formatTime=sec=>`${Math.floor(sec/60)}m ${sec%60}s`;// ----- HANDLER: Submit Exam Settings and Fetch Questions -----\nconst handleSettingsSubmit=async e=>{e.preventDefault();// Calculate estimated time based on 230 minutes for 180 questions ~ 1.28 minutes per question\nconst perQuestionSec=230/180*60;// convert minutes to seconds per question\nconst totalTimeCalc=Math.ceil(perQuestionSec*totalQuestions);setEstimatedTime(totalTimeCalc);setTimeLeft(totalTimeCalc);// Change stage to loading while fetching questions\nsetStage(\"loading\");try{// Replace the URL below with your actual backend URL (if not using Codespaces locally)\nconst response=await fetch(\"https://your-backend-name.onrender.com/generate-questions\",{method:\"POST\",headers:{\"Content-Type\":\"application/json\"},body:JSON.stringify({count:totalQuestions})});const data=await response.json();// Ensure valid questions format from the backend\nif(!data.questions||!Array.isArray(data.questions)){throw new Error(\"Invalid response format\");}setQuestions(data.questions);// Optionally set insight from response, or default message if not provided\nsetDynamicInsight(data.insight||\"Stay sharp! PMP standards are evolving constantly.\");setStage(\"ready\");}catch(err){alert(\"Failed to fetch questions: \"+err.message);// Back to input if fetch fails\nsetStage(\"input\");}};// ----- HANDLER: Begin the Exam -----\nconst handleStartExam=()=>{// Move from ready stage to exam stage and reset current question timer\nsetStage(\"exam\");setQuestionTime(0);};// ----- HANDLER: Process Next Question -----\nconst handleNext=()=>{const currentQ=questions[currentQuestionIndex];const isCorrect=selectedOption===currentQ.answer;// Save the answer details in the selectedAnswers state\nsetSelectedAnswers(prev=>({...prev,[currentQuestionIndex]:{selected:selectedOption,time:questionTime,correct:isCorrect,question:currentQ.question,answer:currentQ.answer,rationale:currentQ.rationale,eco_task:currentQ.eco_task}}));// Increment score if answer is correct\nif(isCorrect)setScore(prev=>prev+1);// Check if there are more questions\nif(currentQuestionIndex+1<totalQuestions){setCurrentQuestionIndex(prev=>prev+1);setQuestionTime(0);setSelectedOption(\"\");}else{// End exam if last question reached\nsetStage(\"result\");}};// ----- HANDLER: Download Exam Log as Excel File -----\nconst handleDownloadExcel=()=>{const data=Object.entries(selectedAnswers).map(_ref=>{let[idx,val]=_ref;return{\"Q#\":Number(idx)+1,Question:val.question,\"Your Answer\":val.selected,\"Correct Answer\":val.answer,\"Correct?\":val.correct?\"✅ Yes\":\"❌ No\",\"Time Taken (s)\":val.time,Rationale:val.rationale,\"ECO Task\":val.eco_task};});// Create a new Excel sheet from the data and prompt a file download\nconst sheet=XLSX.utils.json_to_sheet(data);const book=XLSX.utils.book_new();XLSX.utils.book_append_sheet(book,sheet,\"PMP Results\");XLSX.writeFile(book,\"pmp_exam_results.xlsx\");};// ----- RENDERING THE COMPONENT BASED ON THE CURRENT STAGE -----\nreturn/*#__PURE__*/_jsxs(\"div\",{className:\"p-4 max-w-4xl mx-auto bg-white rounded-xl shadow-md space-y-4\",children:[stage===\"input\"&&/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleSettingsSubmit,className:\"space-y-4\",children:[/*#__PURE__*/_jsx(\"h1\",{className:\"text-3xl font-bold text-center text-blue-800\",children:\"\\uD83D\\uDCCA PMP Exam Trainer\"}),/*#__PURE__*/_jsx(\"p\",{className:\"text-center text-sm text-gray-600 italic\",children:\"\\uD83C\\uDFAF You get 230 minutes for 180 questions. That\\u2019s ~1.28 min per question.\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-center text-blue-700 italic\",children:[\"\\uD83D\\uDCA1 \",dynamicInsight]}),/*#__PURE__*/_jsx(\"input\",{type:\"text\",required:true,placeholder:\"\\uD83D\\uDC64 Enter Your Name\",className:\"w-full p-2 border rounded\",value:userName,onChange:e=>setUserName(e.target.value)}),/*#__PURE__*/_jsx(\"input\",{type:\"number\",min:1,required:true,placeholder:\"\\uD83D\\uDD22 No. of Questions\",className:\"w-full p-2 border rounded\",value:totalQuestions,onChange:e=>setTotalQuestions(Number(e.target.value))}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-sm text-gray-500\",children:[\"\\u23F1\\uFE0F Estimated Time: \",formatTime(estimatedTime)]}),/*#__PURE__*/_jsx(\"button\",{className:\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700\",children:\"Generate Questions\"})]}),stage===\"ready\"&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-center\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-xl font-semibold\",children:\"\\u2705 Questions Ready!\"}),/*#__PURE__*/_jsxs(\"p\",{className:\"text-gray-600 text-sm mb-4\",children:[\"Estimated Time: \",formatTime(estimatedTime)]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleStartExam,className:\"bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700\",children:\"Start Exam\"})]}),stage===\"exam\"&&questions.length>0&&/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-between text-xs text-gray-600 mb-2\",children:[/*#__PURE__*/_jsxs(\"span\",{children:[\"\\u23F0 Time Left: \",formatTime(timeLeft)]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"\\uD83D\\uDCCD Q\",currentQuestionIndex+1,\" of \",totalQuestions]}),/*#__PURE__*/_jsxs(\"span\",{children:[\"\\u23F3 Time on Question: \",formatTime(questionTime)]})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"bg-gray-50 p-4 rounded shadow\",children:[/*#__PURE__*/_jsxs(\"p\",{className:\"font-semibold\",children:[\"Q\",currentQuestionIndex+1,\": \",questions[currentQuestionIndex].question]}),questions[currentQuestionIndex].options.map((opt,idx)=>/*#__PURE__*/_jsxs(\"div\",{className:\"mt-2\",children:[/*#__PURE__*/_jsxs(\"label\",{className:\"block cursor-pointer\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"radio\",name:\"option\",value:opt,className:\"mr-2\",checked:selectedOption===opt,onChange:()=>setSelectedOption(opt)}),opt]}),selectedOption===opt&&/*#__PURE__*/_jsxs(\"div\",{className:\"mt-1 text-sm text-gray-600\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\uD83D\\uDCDA Rationale:\"}),\" \",questions[currentQuestionIndex].rationale,/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"strong\",{children:\"\\uD83D\\uDCCC ECO Task:\"}),\" \",questions[currentQuestionIndex].eco_task]})]},idx))]}),/*#__PURE__*/_jsx(\"button\",{disabled:!selectedOption,onClick:handleNext,className:\"mt-4 w-full bg-purple-600 text-white py-2 rounded hover:bg-purple-700\",children:currentQuestionIndex+1===totalQuestions?\"Finish Exam\":\"Next Question\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"mt-4 text-sm\",children:[/*#__PURE__*/_jsx(\"strong\",{children:\"\\uD83D\\uDCC8 Real-Time Log\"}),/*#__PURE__*/_jsx(\"ul\",{className:\"list-disc pl-4 mt-1\",children:Object.entries(selectedAnswers).map(_ref2=>{let[key,val]=_ref2;return/*#__PURE__*/_jsxs(\"li\",{children:[\"Q\",Number(key)+1,\": \",formatTime(val.time),\" \\u2013 \",val.selected,\" \",val.selected===val.answer?\"✔ Correct\":\"❌ Wrong\"]},key);})})]})]}),stage===\"result\"&&/*#__PURE__*/_jsxs(\"div\",{className:\"text-center space-y-4\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"text-2xl font-bold\",children:\"\\uD83C\\uDF89 Exam Completed!\"}),/*#__PURE__*/_jsxs(\"p\",{children:[userName,\", you scored \",score,\" out of \",totalQuestions,\".\"]}),/*#__PURE__*/_jsx(\"button\",{onClick:handleDownloadExcel,className:\"bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700\",children:\"Download Excel Log\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>window.location.reload(),className:\"ml-2 bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600\",children:\"Back to Home\"})]})]});}","map":{"version":3,"names":["React","useState","useEffect","XLSX","jsx","_jsx","jsxs","_jsxs","ExamTimerApp","userName","setUserName","totalQuestions","setTotalQuestions","estimatedTime","setEstimatedTime","questions","setQuestions","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","timeLeft","setTimeLeft","questionTime","setQuestionTime","stage","setStage","selectedOption","setSelectedOption","score","setScore","dynamicInsight","setDynamicInsight","timer","setInterval","prev","Math","max","clearInterval","formatTime","sec","floor","handleSettingsSubmit","e","preventDefault","perQuestionSec","totalTimeCalc","ceil","response","fetch","method","headers","body","JSON","stringify","count","data","json","Array","isArray","Error","insight","err","alert","message","handleStartExam","handleNext","currentQ","isCorrect","answer","selected","time","correct","question","rationale","eco_task","handleDownloadExcel","Object","entries","map","_ref","idx","val","Number","Question","Rationale","sheet","utils","json_to_sheet","book","book_new","book_append_sheet","writeFile","className","children","onSubmit","type","required","placeholder","value","onChange","target","min","onClick","length","options","opt","name","checked","disabled","_ref2","key","window","location","reload"],"sources":["/workspaces/PMP-exam-timer/src/ExamTimerApp.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport * as XLSX from \"xlsx\";\n\nexport default function ExamTimerApp() {\n  // ----- STATE VARIABLES -----\n  const [userName, setUserName] = useState(\"\");               // User's name\n  const [totalQuestions, setTotalQuestions] = useState(5);      // Number of exam questions\n  const [estimatedTime, setEstimatedTime] = useState(0);        // Calculated total exam time (in seconds)\n  const [questions, setQuestions] = useState([]);               // Questions received from the backend API\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0); // Tracks current question number\n  const [selectedAnswers, setSelectedAnswers] = useState({});   // Stores user's answers along with details per question\n  const [timeLeft, setTimeLeft] = useState(600);                // Overall exam timer (in seconds)\n  const [questionTime, setQuestionTime] = useState(0);          // Time taken on the current question\n  const [stage, setStage] = useState(\"input\");                  // Current stage: \"input\", \"loading\", \"ready\", \"exam\", \"result\"\n  const [selectedOption, setSelectedOption] = useState(\"\");     // Option selected for current question\n  const [score, setScore] = useState(0);                        // User's total correct answers\n  const [dynamicInsight, setDynamicInsight] = useState(\"🧠 PMP Insight will appear here.\");\n\n  // ----- EFFECT: Exam Timer & Question Timer -----\n  useEffect(() => {\n    let timer;\n    if (stage === \"exam\" && timeLeft > 0) {\n      timer = setInterval(() => {\n        // Decrement overall time and increment current question time every second\n        setTimeLeft((prev) => Math.max(0, prev - 1));\n        setQuestionTime((prev) => prev + 1);\n      }, 1000);\n    }\n    // Clean up the timer when component unmounts or dependencies change\n    return () => clearInterval(timer);\n  }, [stage, timeLeft]);\n\n  // ----- HELPER FUNCTION: Format Seconds into Minutes and Seconds -----\n  const formatTime = (sec) => `${Math.floor(sec / 60)}m ${sec % 60}s`;\n\n  // ----- HANDLER: Submit Exam Settings and Fetch Questions -----\n  const handleSettingsSubmit = async (e) => {\n    e.preventDefault();\n\n    // Calculate estimated time based on 230 minutes for 180 questions ~ 1.28 minutes per question\n    const perQuestionSec = (230 / 180) * 60; // convert minutes to seconds per question\n    const totalTimeCalc = Math.ceil(perQuestionSec * totalQuestions);\n    setEstimatedTime(totalTimeCalc);\n    setTimeLeft(totalTimeCalc);\n\n    // Change stage to loading while fetching questions\n    setStage(\"loading\");\n\n    try {\n      // Replace the URL below with your actual backend URL (if not using Codespaces locally)\n      const response = await fetch(\"https://your-backend-name.onrender.com/generate-questions\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ count: totalQuestions }),\n      });\n\n      const data = await response.json();\n      // Ensure valid questions format from the backend\n      if (!data.questions || !Array.isArray(data.questions)) {\n        throw new Error(\"Invalid response format\");\n      }\n\n      setQuestions(data.questions);\n      // Optionally set insight from response, or default message if not provided\n      setDynamicInsight(data.insight || \"Stay sharp! PMP standards are evolving constantly.\");\n      setStage(\"ready\");\n    } catch (err) {\n      alert(\"Failed to fetch questions: \" + err.message);\n      // Back to input if fetch fails\n      setStage(\"input\");\n    }\n  };\n\n  // ----- HANDLER: Begin the Exam -----\n  const handleStartExam = () => {\n    // Move from ready stage to exam stage and reset current question timer\n    setStage(\"exam\");\n    setQuestionTime(0);\n  };\n\n  // ----- HANDLER: Process Next Question -----\n  const handleNext = () => {\n    const currentQ = questions[currentQuestionIndex];\n    const isCorrect = selectedOption === currentQ.answer;\n\n    // Save the answer details in the selectedAnswers state\n    setSelectedAnswers((prev) => ({\n      ...prev,\n      [currentQuestionIndex]: {\n        selected: selectedOption,\n        time: questionTime,\n        correct: isCorrect,\n        question: currentQ.question,\n        answer: currentQ.answer,\n        rationale: currentQ.rationale,\n        eco_task: currentQ.eco_task,\n      },\n    }));\n\n    // Increment score if answer is correct\n    if (isCorrect) setScore((prev) => prev + 1);\n\n    // Check if there are more questions\n    if (currentQuestionIndex + 1 < totalQuestions) {\n      setCurrentQuestionIndex((prev) => prev + 1);\n      setQuestionTime(0);\n      setSelectedOption(\"\");\n    } else {\n      // End exam if last question reached\n      setStage(\"result\");\n    }\n  };\n\n  // ----- HANDLER: Download Exam Log as Excel File -----\n  const handleDownloadExcel = () => {\n    const data = Object.entries(selectedAnswers).map(([idx, val]) => ({\n      \"Q#\": Number(idx) + 1,\n      Question: val.question,\n      \"Your Answer\": val.selected,\n      \"Correct Answer\": val.answer,\n      \"Correct?\": val.correct ? \"✅ Yes\" : \"❌ No\",\n      \"Time Taken (s)\": val.time,\n      Rationale: val.rationale,\n      \"ECO Task\": val.eco_task,\n    }));\n\n    // Create a new Excel sheet from the data and prompt a file download\n    const sheet = XLSX.utils.json_to_sheet(data);\n    const book = XLSX.utils.book_new();\n    XLSX.utils.book_append_sheet(book, sheet, \"PMP Results\");\n    XLSX.writeFile(book, \"pmp_exam_results.xlsx\");\n  };\n\n  // ----- RENDERING THE COMPONENT BASED ON THE CURRENT STAGE -----\n  return (\n    <div className=\"p-4 max-w-4xl mx-auto bg-white rounded-xl shadow-md space-y-4\">\n      {/* Stage: Input Settings Form */}\n      {stage === \"input\" && (\n        <form onSubmit={handleSettingsSubmit} className=\"space-y-4\">\n          <h1 className=\"text-3xl font-bold text-center text-blue-800\">📊 PMP Exam Trainer</h1>\n          <p className=\"text-center text-sm text-gray-600 italic\">\n            🎯 You get 230 minutes for 180 questions. That’s ~1.28 min per question.\n          </p>\n          <p className=\"text-center text-blue-700 italic\">💡 {dynamicInsight}</p>\n          <input\n            type=\"text\"\n            required\n            placeholder=\"👤 Enter Your Name\"\n            className=\"w-full p-2 border rounded\"\n            value={userName}\n            onChange={(e) => setUserName(e.target.value)}\n          />\n          <input\n            type=\"number\"\n            min={1}\n            required\n            placeholder=\"🔢 No. of Questions\"\n            className=\"w-full p-2 border rounded\"\n            value={totalQuestions}\n            onChange={(e) => setTotalQuestions(Number(e.target.value))}\n          />\n          <p className=\"text-sm text-gray-500\">\n            ⏱️ Estimated Time: {formatTime(estimatedTime)}\n          </p>\n          <button className=\"w-full bg-blue-600 text-white py-2 rounded hover:bg-blue-700\">\n            Generate Questions\n          </button>\n        </form>\n      )}\n\n      {/* Stage: Questions Ready Screen */}\n      {stage === \"ready\" && (\n        <div className=\"text-center\">\n          <h2 className=\"text-xl font-semibold\">✅ Questions Ready!</h2>\n          <p className=\"text-gray-600 text-sm mb-4\">\n            Estimated Time: {formatTime(estimatedTime)}\n          </p>\n          <button\n            onClick={handleStartExam}\n            className=\"bg-green-600 text-white px-6 py-2 rounded hover:bg-green-700\"\n          >\n            Start Exam\n          </button>\n        </div>\n      )}\n\n      {/* Stage: Exam In Progress */}\n      {stage === \"exam\" && questions.length > 0 && (\n        <div>\n          <div className=\"flex justify-between text-xs text-gray-600 mb-2\">\n            <span>⏰ Time Left: {formatTime(timeLeft)}</span>\n            <span>\n              📍 Q{currentQuestionIndex + 1} of {totalQuestions}\n            </span>\n            <span>⏳ Time on Question: {formatTime(questionTime)}</span>\n          </div>\n\n          <div className=\"bg-gray-50 p-4 rounded shadow\">\n            <p className=\"font-semibold\">\n              Q{currentQuestionIndex + 1}: {questions[currentQuestionIndex].question}\n            </p>\n            {questions[currentQuestionIndex].options.map((opt, idx) => (\n              <div key={idx} className=\"mt-2\">\n                <label className=\"block cursor-pointer\">\n                  <input\n                    type=\"radio\"\n                    name=\"option\"\n                    value={opt}\n                    className=\"mr-2\"\n                    checked={selectedOption === opt}\n                    onChange={() => setSelectedOption(opt)}\n                  />\n                  {opt}\n                </label>\n                {selectedOption === opt && (\n                  <div className=\"mt-1 text-sm text-gray-600\">\n                    <strong>📚 Rationale:</strong> {questions[currentQuestionIndex].rationale}\n                    <br />\n                    <strong>📌 ECO Task:</strong> {questions[currentQuestionIndex].eco_task}\n                  </div>\n                )}\n              </div>\n            ))}\n          </div>\n\n          <button\n            disabled={!selectedOption}\n            onClick={handleNext}\n            className=\"mt-4 w-full bg-purple-600 text-white py-2 rounded hover:bg-purple-700\"\n          >\n            {currentQuestionIndex + 1 === totalQuestions ? \"Finish Exam\" : \"Next Question\"}\n          </button>\n\n          <div className=\"mt-4 text-sm\">\n            <strong>📈 Real-Time Log</strong>\n            <ul className=\"list-disc pl-4 mt-1\">\n              {Object.entries(selectedAnswers).map(([key, val]) => (\n                <li key={key}>\n                  Q{Number(key) + 1}: {formatTime(val.time)} – {val.selected}{\" \"}\n                  {val.selected === val.answer ? \"✔ Correct\" : \"❌ Wrong\"}\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      )}\n\n      {/* Stage: Exam Results */}\n      {stage === \"result\" && (\n        <div className=\"text-center space-y-4\">\n          <h2 className=\"text-2xl font-bold\">🎉 Exam Completed!</h2>\n          <p>\n            {userName}, you scored {score} out of {totalQuestions}.\n          </p>\n          <button\n            onClick={handleDownloadExcel}\n            className=\"bg-blue-600 text-white py-2 px-4 rounded hover:bg-blue-700\"\n          >\n            Download Excel Log\n          </button>\n          <button\n            onClick={() => window.location.reload()}\n            className=\"ml-2 bg-gray-500 text-white py-2 px-4 rounded hover:bg-gray-600\"\n          >\n            Back to Home\n          </button>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}